'''                                         LINKED LIST
'''


# We start by defining a Node class that represents a node in the linked list.
# The __init__ method is a special method in Python that is automatically called when a new object of the class is created.
# Inside the __init__ method, we initialize the node with a data attribute,
# which represents the value stored in the node, and a next attribute, which is initially set to None.
class Node:

    def __init__(self, value=0, next=None):
        self.value = value
        self.next = next


# Next, we can create a LinkedList class that encapsulates the linked list operations:
# Next, we define the LinkedList class, which manages the linked list.
# The __init__ method initializes the linked list with a head attribute, which represents the first node in the list.
# Initially, it is set to None because the list is empty.
class LinkedList:

    def __init__(self):
        self.head = None


    # Insertion at the beginning:
    def insert_at_beginning(self, value):
        new_node = Node(value)
        new_node.next = self.head
        self.head = new_node


    # Insertion at the end:
    def insert_at_end(self, value):
        new_node = Node(value)
        if self.head is None:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node


    # Insertion at a specific position:
    def insert_at_position(self, data, position):
        if position <= 0:
            self.insert_at_beginning(data)
        else:
            new_node = Node(data)
            current = self.head
            count = 1

            while current and count < position:
                current = current.next
                count += 1

            if current:
                new_node.next = current.next
                current.next = new_node


    # Deletion at the beginning:
    def delete_at_beginning(self):
        if self.head:
            self.head = self.head.next


    # Deletion at the end:
    def delete_at_end(self):
        if self.head:
            if self.head.next is None:
                self.head = None
            else:
                current = self.head
                while current.next.next:
                    current = current.next
                current.next = None


    # Search for a node with a given value
    def search(self, value):
        current = self.head
        while current:
            if current.value == value:
                return True
            current = current.next
        return False


    # Calculate the length/size of the linked list
    def length(self):
        count = 0
        current = self.head
        while current:
            count += 1
            current = current.next
        return count


    # Traversal of the linked list
    def traverse(self):
        current = self.head
        while current:
            print(current.value, end=" ")
            current = current.next
        print()


    # Reverse the linked list
    def reverse(self):
        prev = None
        current = self.head

        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node

        self.head = prev


    # Finding the middle node:
    def find_middle(self):
        slow_ptr = self.head
        fast_ptr = self.head

        while fast_ptr and fast_ptr.next:
            slow_ptr = slow_ptr.next
            fast_ptr = fast_ptr.next.next

        return slow_ptr.value()


    # Merge two linked lists
    def merge(self, list2):
        current = self.head
        while current.next:
            current = current.next
        current.next = list2.head

    # Split the linked list into two halves

    def split(self):
        slow = self.head
        fast = self.head

        while fast and fast.next:
            fast = fast.next.next
            if fast:
                slow = slow.next

        second_half = slow.next
        slow.next = None

        return second_half

    # Detecting cycles in a linked list (Floyd's cycle-finding algorithm):

    def has_cycle(self):
        slow_ptr = self.head
        fast_ptr = self.head

        while fast_ptr and fast_ptr.next:
            slow_ptr = slow_ptr.next
            fast_ptr = fast_ptr.next.next

            if slow_ptr == fast_ptr:
                return True

        return False


# Example usage
linked_list = LinkedList()
linked_list.insert_at_end(10)
linked_list.insert_at_end(20)
linked_list.insert_at_end(30)

linked_list.traverse()  # Output: 10 20 30

linked_list.insert_at_beginning(5)
linked_list.insert_at_position(25, 2)

linked_list.traverse()  # Output: 5 10 25 20 30

print(linked_list.search(20))  # Output: True
print(linked_list.search(40))  # Output: False

print(linked_list.length())  # Output: 5

linked_list.reverse()
linked_list.traverse()  # Output: 30 20 25 10 5

list2 = LinkedList()
list2.insert_at_end(40)
list2.insert_at_end(50)

linked_list.merge(list2)
linked_list.traverse()  # Output: 30 20 25 10 5 40 50

# second_half = linked_list.split()
# linked_list.traverse()  # Output: 30 20 25
# print("Second half:")
# second_half.traverse()  # Output: 10 5 40 50
